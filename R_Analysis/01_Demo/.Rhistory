library(jsonlite)
library(tidyverse)
demo_table <- read.csv(file='demo.csv', check.names = F, stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
demo_table[3,"Year"]
#can filter by column with $ op then comparison ops
filter_table <- demo_table2[demo_table2$price > 10000,]
#use subset to filter by multiple things with &/| ops in one line rather than using grouping
#and a bunch of bracket filters
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
#selecting data in R
demo_table[3,"Year"]
#can also do by index for both
demo_table[3,3]
#can select just by the column name with the $column operator
demo_table$"Vehicle_Class"
#can also select with the $ op and then the index for the value you want
demo_table$Vehicle_Class[2]
#same needs the vector to select from, the size you want selected,
#and replace if you want the sampling to be with replacement of variable value
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#creating a filter table off the demo table with sample
#create a numerical vector that is the same length as the # of rows in the orig df using : operator
#num_rows <- 1:nrow(demo_table)
#use the sample funct to sample a list of indicies from our first vector
#sample_rows <- sample(num_rows, 3)
#use bracket notation to retrieve data from rows from the sample list
#demo_table[sample_rows,]
#then put it all together so in one line
filter_table4 <- demo_table[sample(1:nrow(demo_table), 3),]
?mutate()
#adds columns for mileage per year and is active listing to orig data frame
#uses dplyrs own pipe operator %>%
#mutate funct is like a series of smaller assignment statements that are sep by commas
#can chain mult mutate funct together with the %>% pipe op
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year), IsActive=TRUE)
#Group by function
#group_by() funct tells factor or factors in order to group the df by
#once have group_by data structure use summarize() funct to create columns in our summary df
#using the summarize funct is like the mutate funct for each name and summary (here mean())
#funct a column is created in the new de
#group by condition of vehicle and det the avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>%
summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
#add the max price for each condition and the vehicles in each category
summarize_demo <- demo_table2 %>% group_by(condition) %>%
summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
demo_table3 <- read.csv('demo2.csv', check.names=F, stringsAsFactors = F)
#reshape the demo_table3 into the long format with the gather() funct
#combines the survey metric values into one column - avg them? or only keeps the col you spec?
#since vehicle ID is not in funct it is used as the identifier column
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
#use the spread funct to transform long table back to the original format
wide_table <- long_table %>% spread(key="Metric",value="Score")
#check to see if the wide_table is the same as the original
all.equal(demo_table3,wide_table)
#sort both tables by column name bc we expect wide_table, and demo_table3 to
#be the same and they were slightly diff, then run all.equal again
#to see if they were just out of order or if there is another problem
table <- demo_table3[, order(colnames(wide_table))]
#check again to see if equal with the new sorted table
all.equal(table, wide_table)
##gen a ggplot obj w/ the mpg data (automatically in R)
plt <- ggplot(mpg,aes(x=class))
#then use the geom_bar() to generate the bar chart
setwd("~/Data_Bootcamp/R_Analysis/01_Demo")
library(jsonlite)
library(tidyverse)
demo_table <- read.csv(file='demo.csv', check.names = F, stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
demo_table[3,"Year"]
#can filter by column with $ op then comparison ops
filter_table <- demo_table2[demo_table2$price > 10000,]
#use subset to filter by multiple things with &/| ops in one line rather than using grouping
#and a bunch of bracket filters
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
#selecting data in R
demo_table[3,"Year"]
#can also do by index for both
demo_table[3,3]
#can select just by the column name with the $column operator
demo_table$"Vehicle_Class"
#can also select with the $ op and then the index for the value you want
demo_table$Vehicle_Class[2]
#same needs the vector to select from, the size you want selected,
#and replace if you want the sampling to be with replacement of variable value
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#creating a filter table off the demo table with sample
#create a numerical vector that is the same length as the # of rows in the orig df using : operator
#num_rows <- 1:nrow(demo_table)
#use the sample funct to sample a list of indicies from our first vector
#sample_rows <- sample(num_rows, 3)
#use bracket notation to retrieve data from rows from the sample list
#demo_table[sample_rows,]
#then put it all together so in one line
filter_table4 <- demo_table[sample(1:nrow(demo_table), 3),]
?mutate()
#adds columns for mileage per year and is active listing to orig data frame
#uses dplyrs own pipe operator %>%
#mutate funct is like a series of smaller assignment statements that are sep by commas
#can chain mult mutate funct together with the %>% pipe op
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year), IsActive=TRUE)
#Group by function
#group_by() funct tells factor or factors in order to group the df by
#once have group_by data structure use summarize() funct to create columns in our summary df
#using the summarize funct is like the mutate funct for each name and summary (here mean())
#funct a column is created in the new de
#group by condition of vehicle and det the avg mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>%
summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
#add the max price for each condition and the vehicles in each category
summarize_demo <- demo_table2 %>% group_by(condition) %>%
summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
demo_table3 <- read.csv('demo2.csv', check.names=F, stringsAsFactors = F)
#reshape the demo_table3 into the long format with the gather() funct
#combines the survey metric values into one column - avg them? or only keeps the col you spec?
#since vehicle ID is not in funct it is used as the identifier column
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
#use the spread funct to transform long table back to the original format
wide_table <- long_table %>% spread(key="Metric",value="Score")
#check to see if the wide_table is the same as the original
all.equal(demo_table3,wide_table)
#sort both tables by column name bc we expect wide_table, and demo_table3 to
#be the same and they were slightly diff, then run all.equal again
#to see if they were just out of order or if there is another problem
table <- demo_table3[, order(colnames(wide_table))]
#check again to see if equal with the new sorted table
all.equal(table, wide_table)
##gen a ggplot obj w/ the mpg data (automatically in R)
plt <- ggplot(mpg,aes(x=class))
#then use the geom_bar() to generate the bar chart
#then use the geom_bar() to generate the bar chart
##can add the plotting and formatting functions with the + op
plt + geom_bar()
##use summarize() to create a summary for a comparison by category bar chart
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups='keep')
#make the ggplot obj
plt2 <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
#use the geom_col() to create the graph
plt2 + geom_col()
##gen a ggplot obj w/ the mpg data (automatically in R)
plt <- ggplot(mpg,aes(x=class))
#then use the geom_bar() to generate the bar chart
##can add the plotting and formatting functions with the + op
plt + geom_bar()
##gen a ggplot obj w/ the mpg data (automatically in R)
Count_per_Class <- ggplot(mpg,aes(x=class))
#then use the geom_bar() to generate the bar chart
##can add the plotting and formatting functions with the + op
Count_per_Class + geom_bar()
##use summarize() to create a summary for a comparison by category bar chart
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups='keep')
#make the ggplot obj
Vehicle_Count_Per_Manufacturer <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
#use the geom_col() to create the graph
Vehicle_Count_Per_Manufacturer + geom_col()
View(plt2)
View(plt2)
View(plt)
View(wide_table)
View(Vehicle_Count_Per_Manufacturer)
#use the geom_col() to create the graph
##fix the titles of the x & y axis by adding with the + op the xlab() & ylab() formatting functs
Vehicle_Count_Per_Manufacturer + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Database")
#use the geom_col() to create the graph
##fix the titles of the x & y axis by adding with the + op the xlab() & ylab() formatting functs
##fix the x value labels by rotating 45 degrees, add with the + op after the axis titles
Vehicle_Count_Per_Manufacturer + geom_col() + xlab("Manufacturing Company") +
ylab("Number of Vehicles in Database") + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_fuel_sum <- subset(mpg,manufacturer=="toyota") %>% group_by(xcy1) %>%
summarize(Mean_Hwy= mean(hwy), .group='keep')
#create a line graph comp the hwy fuel economy (hwy) of toyota vehicles
#comp to the different cylinder sizes(cy1)
#create a summary where you subet the data by toyota, group by cy1, and summarize by mean of hwy
mpg_fuel_sum <- subset(mpg,manufacturer=="toyota") %>% group_by(cy1) %>%
summarize(Mean_Hwy= mean(hwy), .group='keep')
head(mpg)
#create a line graph comp the hwy fuel economy (hwy) of toyota vehicles
#comp to the different cylinder sizes(cy1)
#create a summary where you subet the data by toyota, group by cy1, and summarize by mean of hwy
mpg_fuel_sum <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>%
summarize(Mean_Hwy= mean(hwy), .group='keep')
#create the ggplot obj
plt_fuel <- ggplot(mpg_fuel_sum, aes(x=cyl,y=Mean_Hwy))
#plot as a line graph with geom_line()
plt_fuel + geom_line()
#plot as a line graph with geom_line()
##fix the scales for the x & y axis by adding with + op
plt_fuel + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks=c(15:30))
##gen a scatter plot and change the x & y axis titles
plt_eng_size_fuel_eff + geom_point() + xlab("Engine Size(L)") + ylab("City Fuel Efficency (MPG)")
create a scatter plot with the engine size(displ) vs fuel effic(cty)
plt_eng_size_fuel_eff <- ggplot(mpg, aes(x=displ, y=cty))
##gen a scatter plot and change the x & y axis titles
plt_eng_size_fuel_eff + geom_point() + xlab("Engine Size(L)") + ylab("City Fuel Efficency (MPG)")
##gen a scatter plot and change the x & y axis titles
##add color by vehicle class to better see relationships btwn additional variables
###need to change to adjusting x&y labels with the lab() function rather than y&xlab() funct independ
#plt_eng_size_fuel_eff + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#change to:
plt_eng_size_fuel_eff + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt_eng_size_fuel_eff <- ggplot(mpg, aes(x=displ, y=cty, color=class))
##gen a scatter plot and change the x & y axis titles
##add color by vehicle class to better see relationships btwn additional variables
###need to change to adjusting x&y labels with the lab() function rather than y&xlab() funct independ
#plt_eng_size_fuel_eff + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#change to:
plt_eng_size_fuel_eff + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt_eng_size_fuel_eff <- ggplot(mpg, aes(x=displ, y=cty, color=class, shape=drv))
##gen a scatter plot and change the x & y axis titles
##add color by vehicle class to better see relationships btwn additional variables
###need to change to adjusting x&y labels with the lab() function rather than y&xlab() funct independ
#plt_eng_size_fuel_eff + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#change to:
plt_eng_size_fuel_eff + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive")
#create a scatter plot with the engine size(displ) vs fuel effic(cty)
##adjust to group by class to show relat btwn additional variables like class
#done in the aes() customization
plt_eng_size_fuel_eff <- ggplot(mpg, aes(x=displ, y=cty, color=class, shape=drv, size=cty))
##gen a scatter plot and change the x & y axis titles
##add color by vehicle class to better see relationships btwn additional variables
###need to change to adjusting x&y labels with the lab() function rather than y&xlab() funct independ
#plt_eng_size_fuel_eff + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#change to:
plt_eng_size_fuel_eff + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive", size="City Fuel-Efficiency(MPG)")
#gen a boxplot of hwy fuel effic
plt_box <- ggplot(mpg, aes(y=hwy))
plt_box + geom_boxplot()
adding an x, only need the y to create the single box plot og ggplot obj
plt_box <- ggplot(mpg, aes(x=manufacturer, y=hwy))
#create the graph and rotate x-axis labels 45 degrees
plt_box + geom_boxplot() + theme(axis.text.x(angle=45,hjust=1))
##add an categorical grouping factor to gen a boxplot that compares measurements from mult groups
#done by adding an x, only need the y to create the single box plot og ggplot obj
plt_box <- ggplot(mpg, aes(x=manufacturer, y=hwy))
#create the graph and rotate x-axis labels 45 degrees
plt_box + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#gen a boxplot of hwy fuel effic
##add an categorical grouping factor to gen a boxplot that compares measurements from mult groups
#done by adding an x, only need the y to create the single box plot og ggplot obj
plt_box <- ggplot(mpg, aes(x=manufacturer, y=hwy,color=manufacturer))
#create the graph and rotate x-axis labels 45 degrees
plt_box + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) +labs(color="Vehicle Manufacturer")
#gen a ggplot obj with the summary info, x & y values and the fill =mean)
plt_heat <- ggplot(mpg_class_fuel, aes(x=class, y=factor(year), fill=Mean_Hwy))
#create a heat map with the summ grouping by the class and summarize(mean of hwy fuel eff)
mpg_class_fuel <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#gen a ggplot obj with the summary info, x & y values and the fill =mean)
plt_heat <- ggplot(mpg_class_fuel, aes(x=class, y=factor(year), fill=Mean_Hwy))
#create plot and add labs() for the axis titles and legend with for fill
plt_heat + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
#then change class to model to see the heatmap of models fuel eff
mpg_class_fuel <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#gen a ggplot obj with the summary info, x & y values and the fill =mean)
plt_heat <- ggplot(mpg_class_fuel, aes(x=class, y=factor(year), fill=Mean_Hwy))
#create plot and add labs() for the axis titles and legend with for fill
plt_heat + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
#create a heat map with the summ grouping by the class and summarize(mean of hwy fuel eff)
#then change class to model to see the heatmap of models fuel eff
mpg_class_fuel <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#gen a ggplot obj with the summary info, x & y values and the fill =mean)
plt_heat <- ggplot(mpg_class_fuel, aes(x=model, y=factor(year), fill=Mean_Hwy))
#create plot and add labs() for the axis titles and legend with for fill
plt_heat + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
##adding layers to plots: recreate the boxplot from earlier and add the data points on top
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
#create the first layer - mean engine size for vehicle class
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot
#create the second layer with the error bar overlay (add to orig graph with + op)
##have to add the std dev calc to the summarize calc above
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
#convert to long data type for facet() practice
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt5 <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#add boxplot with labels rotated
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#convert to long data type for facet() practice
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
#put data into a ggplot obj
plt5 <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#add boxplot with labels rotated
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#put data into a ggplot obj
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
#test the dist of vehicle weights from the built in mtcars dataset -
ggplot(mtcars,aes(x=wt)) + geom_density()
#test dist quantitatively
shapiro.test(mtcars$wt)
?read.csv()
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
# import the dataset into ggplot to look at distribution of driven miles for the whole dat set
plt_cars <- ggplot(population_table, aes(x=log10(Miles_Driven)))
#plot the plt_cars to see the distribution of driven miles
plt_cars + geom_density()
